name: Build on ubuntu

on:
  push:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    container: falkordb/falkordb-build:latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          # - linux/arm64
    steps:
      - name: Safe dir
        run: git config --global --add safe.directory '*'

      - uses: actions/checkout@v3
        with:
          set-safe-directory: "*"
          submodules: recursive

      - name: Cache GraphBLAS ${{ matrix.platform }}
        if: github.event_name == 'push'
        id: cache_graphblas
        uses: actions/cache@v3
        with:
          path: /FalkorDB/bin/linux-${{ matrix.platform == 'linux/amd64' && 'x64' || 'arm64v8' }}-release/GraphBLAS
          key: graphblas-${{ matrix.platform == 'linux/amd64' && 'x64' || 'arm64v8' }}-${{ hashFiles('./deps/GraphBLAS/Include/GraphBLAS.h') }}

      - name: Cache parser ${{ matrix.platform }}
        if: github.event_name == 'push'
        id: cache_parser
        uses: actions/cache@v3
        with:
          path: /FalkorDB/bin/linux-${{ matrix.platform == 'linux/amd64' && 'x64' || 'arm64v8' }}-release/libcypher-parser
          key: parser-${{ matrix.platform == 'linux/amd64' && 'x64' || 'arm64v8' }}-${{ hashFiles('./deps/libcypher-parser/lib/src/parser.c') }}

      - name: Cache search ${{ matrix.platform }}
        if: github.event_name == 'push'
        id: cache_search
        uses: actions/cache@v3
        with:
          path: /FalkorDB/bin/linux-${{ matrix.platform == 'linux/amd64' && 'x64' || 'arm64v8' }}-release/search-static
          key: search-${{ matrix.platform == 'linux/amd64' && 'x64' || 'arm64v8' }}-${{ hashFiles('./deps/RediSearch/src/version.h') }}

      # Make sure the working directory is static between runs
      # and always the same for the CMake cache
      - name: Relocate source
        run: |
          mkdir -p /FalkorDB
          mv $GITHUB_WORKSPACE/* /FalkorDB

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          # network=host driver-opt needed to push to local registry
          driver-opts: network=host

      - name: Build compiler image
        id: build_compiler
        uses: docker/build-push-action@v5
        with:
          context: /FalkorDB
          file: /FalkorDB/build/docker/Dockerfile.compiler
          platforms: ${{ matrix.platform }}
          tags: localhost:5000/falkordb/falkordb-compiler
          push: true

      - name: Build base image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: /FalkorDB
          file: /FalkorDB/build/docker/Dockerfile
          platforms: ${{ matrix.platform }}
          outputs: type=docker,dest=/tmp/falkordb.tar
          tags: falkordb/falkordb
          build-args: |
            BASE_IMAGE=localhost:5000/falkordb/falkordb-compiler

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: Upload image
        uses: actions/upload-artifact@v3
        with:
          name: falkordb
          path: /tmp/falkordb.tar
          if-no-files-found: error

      - name: Copy bin from docker for caching
        working-directory: /FalkorDB
        run: |
          id=$(docker create --platform=${{ matrix.platform }} falkordb/falkordb-compiler)
          docker cp $id:/FalkorDB/bin /FalkorDB/bin
          docker rm -v $id
          ls -l -R /FalkorDB/bin

  merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Safe dir
        run: git config --global --add safe.directory '*'

      - uses: actions/checkout@v3
        with:
          set-safe-directory: "*"
          submodules: recursive

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: falkordb
          path: /tmp

      - name: Load image
        id: load_image
        run: |
          docker load --input /tmp/falkordb.tar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./tests/Dockerfile
          outputs: type=docker,push=false,dest=/tmp/falkordb-tests.tar
          tags: falkordb/falkordb-tests

      - name: Upload tests image
        uses: actions/upload-artifact@v3
        with:
          name: falkordb-tests
          path: /tmp/falkordb-tests.tar
          if-no-files-found: error

  unit-tests:
    runs-on: ubuntu-latest
    needs: merge
    steps:
      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: falkordb-tests
          path: /tmp

      - name: Load image
        id: load_image
        run: |
          docker load --input /tmp/falkordb-tests.tar

      - name: Unit tests
        working-directory: /FalkorDB
        run: |
          docker run --rm -v $PWD:/FalkorDB falkordb/falkordb-tests make CLEAR_LOGS=0  unit-tests

  flow-tests:
    runs-on: ubuntu-latest
    needs: merge
    steps:
      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: falkordb-tests
          path: /tmp

      - name: Load image
        id: load_image
        run: |
          docker load --input /tmp/falkordb-tests.tar

      - name: Flow tests
        working-directory: /FalkorDB
        run: |
          docker run --rm -v $PWD:/FalkorDB falkordb/falkordb-tests make CLEAR_LOGS=0 PARALLEL=4 flow-tests

  tck-tests:
    runs-on: ubuntu-latest
    needs: merge
    steps:
      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: falkordb-tests
          path: /tmp

      - name: Load image
        id: load_image
        run: |
          docker load --input /tmp/falkordb-tests.tar

      - name: TCK tests
        working-directory: /FalkorDB
        run: |
          docker run --rm -v $PWD:/FalkorDB falkordb/falkordb-tests make CLEAR_LOGS=0 tck-tests

  fuzz-tests:
    runs-on: ubuntu-latest
    needs: merge
    steps:
      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: falkordb-tests
          path: /tmp

      - name: Load image
        id: load_image
        run: |
          docker load --input /tmp/falkordb-tests.tar

      - name: Fuzz tests
        working-directory: /FalkorDB
        run: |
          docker run --rm -v $PWD:/FalkorDB falkordb/falkordb-tests make fuzz TIMEOUT=180
