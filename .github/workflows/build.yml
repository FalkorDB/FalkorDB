name: Build on ubuntu

on:
  workflow_dispatch:
  pull_request:
    branches: [master]
  push:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    container: falkordb/falkordb-build:latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    env:
      ARCH_SUFFIX: ${{ matrix.platform == 'linux/amd64' && 'x64' || 'arm64v8' }}
    steps:
      - name: Safe dir
        run: git config --global --add safe.directory '*'

      - uses: actions/checkout@v3
        with:
          set-safe-directory: "*"
          submodules: recursive

      - name: Cache compiler image ${{ matrix.platform }}
        id: cache_compiler_image
        uses: actions/cache@v3
        with:
          path: /tmp/falkordb-compiler-${{ env.ARCH_SUFFIX }}.tar
          key: falkordb-compiler-${{ env.ARCH_SUFFIX }}-${{ hashFiles('./build/docker/Dockerfile.compiler') }}-${{ hashFiles('./deps/GraphBLAS/Include/GraphBLAS.h') }}-${{ hashFiles('./deps/libcypher-parser/lib/src/parser.c') }}-${{ hashFiles('./deps/RediSearch/src/version.h') }}

      # Make sure the working directory is static between runs
      # and always the same for the CMake cache
      - name: Relocate source
        run: |
          mkdir -p /FalkorDB
          mv $GITHUB_WORKSPACE/* /FalkorDB

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          # network=host driver-opt needed to push to local registry
          driver-opts: network=host

      - name: Build compiler image
        if: steps.cache_compiler_image.outputs.cache-hit == false
        id: build_compiler
        uses: docker/build-push-action@v5
        with:
          context: /FalkorDB
          file: /FalkorDB/build/docker/Dockerfile.compiler
          platforms: ${{ matrix.platform }}
          tags: localhost:5000/falkordb/falkordb-compiler
          outputs: type=docker,dest=/tmp/falkordb-compiler-${{ env.ARCH_SUFFIX }}.tar
          # push: true
          build-args: |
            TARGETPLATFORM=${{ matrix.platform }}

      - name: Push compiler image
        run: |
          docker load --input /tmp/falkordb-compiler-${{ env.ARCH_SUFFIX }}.tar
          docker push localhost:5000/falkordb/falkordb-compiler

      - name: Build tests image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: /FalkorDB/tests/Dockerfile
          outputs: type=docker,dest=/tmp/falkordb-tests-${{ env.ARCH_SUFFIX }}.tar
          tags: falkordb/falkordb-tests
          platforms: ${{ matrix.platform }}
          build-args: |
            BASE_IMAGE=localhost:5000/falkordb/falkordb-compiler
            TARGETPLATFORM=${{ matrix.platform }}

      - name: Upload tests image
        uses: actions/upload-artifact@v3
        with:
          name: falkordb-tests-${{ env.ARCH_SUFFIX }}
          path: /tmp/falkordb-tests-${{ env.ARCH_SUFFIX }}.tar
          if-no-files-found: error

      - name: Build base image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: /FalkorDB
          file: /FalkorDB/build/docker/Dockerfile
          platforms: ${{ matrix.platform }}
          outputs: type=docker,dest=/tmp/falkordb-${{ env.ARCH_SUFFIX }}.tar
          tags: falkordb/falkordb-${{ env.ARCH_SUFFIX }}
          build-args: |
            BASE_IMAGE=localhost:5000/falkordb/falkordb-compiler
            TARGETPLATFORM=${{ matrix.platform }}

      - name: Upload image
        uses: actions/upload-artifact@v3
        with:
          name: falkordb-${{ env.ARCH_SUFFIX }}
          path: /tmp/falkordb-${{ env.ARCH_SUFFIX }}.tar
          if-no-files-found: error

  unit-tests:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    env:
      ARCH_SUFFIX: ${{ matrix.platform == 'linux/amd64' && 'x64' || 'arm64v8' }}
    steps:
      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: falkordb-tests-${{ env.ARCH_SUFFIX }}
          path: /tmp

      - name: Set up QEMU
        if: ${{ matrix.platform == 'linux/arm64' }}
        uses: docker/setup-qemu-action@v3

      - name: Load image
        id: load_image
        run: |
          docker load --input /tmp/falkordb-tests-${{ env.ARCH_SUFFIX }}.tar

      - name: Unit tests
        run: |
          docker run --platform ${{ matrix.platform }} --rm falkordb/falkordb-tests make CLEAR_LOGS=0 unit-tests

  flow-tests:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    env:
      ARCH_SUFFIX: ${{ matrix.platform == 'linux/amd64' && 'x64' || 'arm64v8' }}
    steps:
      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: falkordb-tests-${{ env.ARCH_SUFFIX }}
          path: /tmp

      - name: Set up QEMU
        if: ${{ matrix.platform == 'linux/arm64' }}
        uses: docker/setup-qemu-action@v3

      - name: Load image
        id: load_image
        run: |
          docker load --input /tmp/falkordb-tests-${{ env.ARCH_SUFFIX }}.tar

      - name: Flow tests
        run: |
          docker run --platform ${{ matrix.platform }} --rm falkordb/falkordb-tests make CLEAR_LOGS=0 PARALLEL=4 flow-tests

  tck-tests:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    env:
      ARCH_SUFFIX: ${{ matrix.platform == 'linux/amd64' && 'x64' || 'arm64v8' }}
    steps:
      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: falkordb-tests-${{ env.ARCH_SUFFIX }}
          path: /tmp

      - name: Set up QEMU
        if: ${{ matrix.platform == 'linux/arm64' }}
        uses: docker/setup-qemu-action@v3

      - name: Load image
        id: load_image
        run: |
          docker load --input /tmp/falkordb-tests-${{ env.ARCH_SUFFIX }}.tar

      - name: TCK tests
        run: |
          docker run --platform ${{ matrix.platform }} --rm falkordb/falkordb-tests make CLEAR_LOGS=0 tck-tests

  fuzz-tests:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    env:
      ARCH_SUFFIX: ${{ matrix.platform == 'linux/amd64' && 'x64' || 'arm64v8' }}
    steps:
      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: falkordb-tests-${{ env.ARCH_SUFFIX }}
          path: /tmp

      - name: Set up QEMU
        if: ${{ matrix.platform == 'linux/arm64' }}
        uses: docker/setup-qemu-action@v3

      - name: Load image
        id: load_image
        run: |
          docker load --input /tmp/falkordb-tests-${{ env.ARCH_SUFFIX }}.tar

      - name: Fuzz tests
        run: |
          docker run --platform ${{ matrix.platform }} --rm falkordb/falkordb-tests make fuzz TIMEOUT=180
